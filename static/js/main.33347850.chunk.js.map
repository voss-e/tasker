{"version":3,"sources":["contexts/TaskContext.js","contexts/ThemeContext.js","components/TaskList.js","components/ToggleTheme.js","App.js","serviceWorker.js","index.js"],"names":["TaskContext","createContext","TaskContextProvider","props","_useState","useState","content","id","uuid","_useState2","Object","slicedToArray","tasks","setTasks","react_default","a","createElement","Provider","value","addTask","concat","toConsumableArray","deleteTask","filter","task","children","ThemeContext","ThemeContextProvider","state","isLightTheme","light","syntax","ui","bg","delBtn","dark","toggleTheme","_this","setState","objectSpread","this","Component","TaskList","_useContext","useContext","setContent","_useContext2","theme","className","style","background","color","map","key","onClick","onSubmit","e","preventDefault","type","placeholder","onChange","target","rel","href","class","ToggleTheme","htmlFor","App","contexts_ThemeContext","contexts_TaskContext","components_TaskList","components_ToggleTheme","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33347850.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\nimport uuid from  'uuid/v1'\n\nexport const TaskContext = createContext()\n\nconst TaskContextProvider = (props) => {\n  const [tasks, setTasks] = useState([\n    {content: 'Buy groceries', id:uuid()},\n    {content: 'Hit the gym', id:uuid()}\n  ])\n\n  const addTask = (content) => {\n    setTasks([...tasks, { content: content, id: uuid()}])\n  }\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter(task => {\n      return (\n        task.id !== id\n      )}))\n  }\n\n  return (\n    <TaskContext.Provider value={{tasks, addTask, deleteTask}}>\n    {props.children}\n    </TaskContext.Provider>\n  )\n}\n\nexport default TaskContextProvider\n","import React, { createContext, Component } from 'react'\n\nexport const ThemeContext = createContext()\n\nclass ThemeContextProvider extends Component {\n  state = {\n    isLightTheme: true,\n    light: {\n      syntax: '#2c2c2e',\n      ui: '#fff',\n      bg: '#e5e5ea',\n      delBtn: '#ff3b30'\n    },\n    dark: {\n      syntax: '#e5e5ea',\n      ui: '#333',\n      bg: '#2c2c2e',\n      delBtn: '#ffcc00'\n\n    }\n  }\n\n  toggleTheme = () => {\n    this.setState({\n      isLightTheme: !this.state.isLightTheme\n    })\n  }\n\n  render () {\n    return (\n      <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    )\n  }\n}\n\nexport default ThemeContextProvider\n","import React, { useContext, useState } from 'react'\nimport { TaskContext } from '../contexts/TaskContext'\nimport { ThemeContext } from '../contexts/ThemeContext'\n\nconst TaskList = () => {\n\n  const { tasks, deleteTask, addTask } = useContext(TaskContext)\n  const [content, setContent] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    addTask(content)\n    setContent('')\n  }\n\n/*  const removeTask = (id) => {\n      deleteTask(id)\n  } */\n\n  const { isLightTheme, light, dark } = useContext(ThemeContext)\n  const theme = isLightTheme ? light : dark;\n\n  return (\n      <div className=\"container\">\n\n        <div className=\"header\">Tasker </div>\n        <div className=\"fm-card\" style={{background: theme.bg}}>\n          <div className=\"task-list\" style={{color: theme.syntax, background: theme.bg}}>\n            <ul className=\"task-ulist\">\n             {tasks.map(task => {\n               return (\n                 <div key={task.id} className=\"wrapper-li\">\n                 <li key={task.id} className=\"task-item\" style={{background: theme.bg}}>{task.content}</li>\n                 <span key={task.id} onClick= {() => deleteTask(task.id)} className=\"delete-btn\">Delete</span>\n\n                 </div>\n\n               )\n             })}\n            </ul>\n          </div>\n          <form className=\"task-form\" onSubmit={ handleSubmit }>\n            <input  style={{background: theme.syntax, color: theme.bg}} className=\"content-input\" type=\"text\" placeholder=\"Do laundry\"\n             value={ content } onChange={ (e) => setContent(e.target.value)} />\n            <input style={{background: theme.syntax, color: theme.bg}} className=\"submit-input\" type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/voss-e\"><i class=\"fa fa-github\"></i> </a>\n      </div>\n  )\n}\n\nexport default TaskList\n","import React, { useContext } from 'react'\nimport { ThemeContext } from '../contexts/ThemeContext'\n\nconst ToggleTheme = () => {\n\n  const { toggleTheme } = useContext(ThemeContext)\n\n  return (\n    <div className=\"kita\">\n      <input  className=\"input-ios\" onClick={ toggleTheme } type=\"checkbox\" id=\"ios\"/>\n      <label className=\"label-ios\" htmlFor=\"ios\"><i className=\"i-ios\"></i></label>\n    </div>\n  )\n}\n\nexport default ToggleTheme\n","import React from 'react';\nimport TaskList from './components/TaskList'\nimport ToggleTheme from './components/ToggleTheme'\nimport ThemeContextProvider from './contexts/ThemeContext'\nimport TaskContextProvider from './contexts/TaskContext'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <ThemeContextProvider>\n        <TaskContextProvider>\n          <TaskList />\n          <ToggleTheme />\n        </TaskContextProvider>\n      </ThemeContextProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}